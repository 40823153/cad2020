var tipuesearch = {"pages": [{'title': '簡介', 'text': '四設計二甲 40823153 蕭日傑 \n 個人倉儲\xa0 cad2020 \n 個人 youtube \n 個人 Gitter \n 評分表單\xa0 電腦輔助設計實習自評與互評表單 \n W15 - W18\xa0評分表單  電腦輔助設計實習自評與互評表單 \n \n \n', 'tags': '', 'url': '簡介.html'}, {'title': 'about', 'text': '\n 此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules \xa0 https://github.com/mdecourse/newcms.git \n \n \n \n \n', 'tags': '', 'url': 'about.html'}, {'title': 'develop', 'text': '\n https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n 40823153 \n \n \n \n \n', 'tags': '', 'url': 'develop.html'}, {'title': '課程內容', 'text': '', 'tags': '', 'url': '課程內容.html'}, {'title': 'Week 1', 'text': 'Autodesk Inventor Professional 2019 \n 體積 \n Autodesk Inventor Professional 2019 \n 圖檔 \n 零件13 \n \n 零件14 \n \n 零件15 \n \n 零件16 \n \n 零件17 \n \n 零件18 \n \n 零件19 \n \n 零件20 \n \n 零件21 \n \n 零件22 \n \n 零件23 \n \n 零件24 \n \n', 'tags': '', 'url': 'Week 1.html'}, {'title': 'week 4', 'text': 'ssh的增設 \n', 'tags': '', 'url': 'week 4.html'}, {'title': 'week 5', 'text': 'nx 介紹 \n \n \n', 'tags': '', 'url': 'week 5.html'}, {'title': 'week 7', 'text': '工程師的特質 \n 利用 SciTE 編輯器類解譯 ANSI C 程式 \n \n', 'tags': '', 'url': 'week 7.html'}, {'title': '工程師的特質', 'text': '1.需要具有創造性 \n 2. 精確精巧很聰明的創造 \n', 'tags': '', 'url': '工程師的特質.html'}, {'title': '利用 SciTE 編輯器類解譯 ANSI C 程式', 'text': '1. 從 Tiny C 官方網站中的 \xa0 Download \xa0 連結, 可以下載\xa0 tcc-0.9.27-win64-bin.zip , 解開壓縮檔案後的目錄為 tcc, 其中包含 tcc.exe, 可以用來編譯 ANSI C 程式, 這個目錄必須放在 y:\\ 根目錄中. \n 2. 接著必須將 y:\\tcc\\ 放入隨身系統中的 path 命令搜尋路徑中, 一旦啟動後就可以直接執行 tcc.exe, 也就是 start.bat 必須修改如下: \n set path_portablegit=%Disk%:\\Portablegit\\bin;\nset path_julia=%Disk%:\\julia-1.5.2\\bin;\nset path_tcc=%Disk%:\\tcc\\;\n \npath=%Disk%:;%path_python%;%path_portablegit%;%path_julia%;%path_tcc%;%path%; \n 在上面 start.bat 的設定中, 可以發現除了 portablegit 之外, 同時增加 path_julia 與 path_tcc 兩個批次檔變數的設定, 並且分別加到 path= 的設定中. \n 完成後, 可以利用 stop.bat 關閉隨身系統後, 再使用 start.bat 重新啟動, 並在命令列中輸入 tcc, 若出現 \n Tiny C Compiler 0.9.27 - Copyright (C) 2001-2006 Fabrice Bellard\nUsage: tcc [options...] [-o outfile] [-c] infile(s)...\n       tcc [options...] -run infile [arguments...]\nGeneral options:\n  -c          compile only - generate an object file\n  -o outfile  set output filename\n  -run        run compiled source\n  -fflag      set or reset (with \'no-\' prefix) \'flag\' (see tcc -hh)\n  -Wwarning   set or reset (with \'no-\' prefix) \'warning\' (see tcc -hh)\n  -w          disable all warnings\n  -v -vv      show version, show search paths or loaded files\n  -h -hh      show this, show more help\n  -bench      show compilation statistics\n  -           use stdin pipe as infile\n  @listfile   read arguments from listfile\nPreprocessor options:\n  -Idir       add include path \'dir\'\n  -Dsym[=val] define \'sym\' with value \'val\'\n  -Usym       undefine \'sym\'\n  -E          preprocess only\nLinker options:\n  -Ldir       add library path \'dir\'\n  -llib       link with dynamic or static library \'lib\'\n  -r          generate (relocatable) object file\n  -shared     generate a shared library/dll\n  -rdynamic   export all global symbols to dynamic linker\n  -soname     set name for shared library to be used at runtime\n  -Wl,-opt[=val]  set linker option (see tcc -hh)\nDebugger options:\n  -g          generate runtime debug info\n  -b          compile with built-in memory and bounds checker (implies -g)\n  -bt N       show N callers in stack traces\nMisc. options:\n  -x[c|a|n]   specify type of the next infile\n  -nostdinc   do not use standard system include paths\n  -nostdlib   do not link with standard crt and libraries\n  -Bdir       set tcc\'s private include/library dir\n  -MD         generate dependency file for make\n  -MF file    specify dependency file name\n  -m32/64     defer to i386/x86_64 cross compiler\nTools:\n  create library  : tcc -ar [rcsv] lib.a files\n  create def file : tcc -impdef lib.dll [-v] [-o lib.def] \n 表示啟動命令搜尋路徑已經包含 y:\\tcc 目錄. \n 3. 接下來必須修改 SciTE 編輯器中的 cpp.properties, 讓 Tools -> Go 可以呼叫 tcc.exe 類解譯編輯器中副檔名為 .c 的 ANSI C 程式. \n 作法為將滑鼠指向 SciTE 下拉式功能表 Options 往下點擊 Open cpp.properties 編輯設定檔案, 並且勾選 View -> Line Number 在編輯器中顯示行號, 針對\xa0 476 行之後的設定修改如下: \n ccopts=-pedantic -Os\n#cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o\n#ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o\ncc=y:/tcc/tcc.exe -run\nccc=y:/tcc/tcc.exe -run\n \nmake.command=make\ncommand.compile.*.c=$(ccc) -std=c99\ncommand.build.*.c=$(make.command)\ncommand.build.*.h=$(make.command)\ncommand.clean.*.c=$(make.command) clean\ncommand.clean.*.h=$(make.command) clean\ncommand.go.*.c=$(cc) $(FileNameExt)\n#command.go.*.c=./$(FileName)\n# To make the Go command both compile (if needed) and execute, use this setting: \n 意即, 將原先 cc=g++ 與 ccc=gcc 改為利用 y:\\tcc\\tcc.exe -run 進行類解譯, 而且將原先必須經過編譯後以檔名執行的 command.go.*.c 設為直接利用 tcc.exe -run ex.c 的方式執行, 而 FileNameExt 就是帶有副檔名的程式名稱. \n 4. 完成上述設定後, 可以在編輯器中納入 hello.c, 並且利用 Tools -> Go 直接進行存檔並且執行. \n #include <stdio.h>\n  \nint main() {\n    printf("Hello, world!\\n");\n    return 0;\n} \n 5. 接下來可以設法利用 ANSI C 練習一下 \xa0 http://mde.tw/lab/content/Dart.html \xa0中的數值分析運算, 利用 Runge-Kutta 解微分方程式. 為了能讓 C 解出的數值資料可以轉為圖檔, 並且允許加入中英文標註資料, 還必須下載 \xa0 gnuplot.7z \xa0 與 \xa0 wqy-microhei.ttc , 其中的 gunplot 目錄與 .ttc 中文字型檔案可以放在 y:\\, 並且在 start.bat 加入 y:\\gnuplot\\bin 命令搜尋路徑, 而最新的 gnuplot 也可以從 \xa0 http://www.gnuplot.info/ \xa0下載. \n 6. 完成上述所有步驟設定後, 可以執行下列 ANSI C 程式: \n /* Runge Kutta for a set of first order differential equations */\n  \n#include <stdio.h>\n#include <math.h>\n  \n#define N 2 /* number of first order equations */\n#define dist 0.1 /* stepsize in t*/\n#define MAX 30.0 /* max for t */\n  \nFILE *output; /* internal filename */\nFILE *output1; /* internal filename */\n// 利用 pipe 呼叫 gnuplot 繪圖\nFILE *pipe;\n  \nvoid runge4(double x, double y[], double step); /* Runge-Kutta function */\ndouble f(double x, double y[], int i); /* function for derivatives */\n  \nvoid main(){\n  \n  double t, y[N];\n  int j;\n  \n  output=fopen("osc.dat", "w"); /* external filename */\n  output1=fopen("osc1.dat", "w"); /* external filename */\n  \n  y[0]=1.0; /* initial position */\n  y[1]=0.0; /* initial velocity */\n  \n  //fprintf(output, "0\\t%f\\n", y[0]);\n  \n  for (j=1; j*dist<=MAX ;j++) /* time loop */{\n  \n    t=j*dist;\n    runge4(t, y, dist);\n    fprintf(output, "%f\\t%f\\n", t, y[0]);\n    fprintf(output1, "%f\\t%f\\n", t, y[1]);\n  }\n  \n  fclose(output);\n  fclose(output1);\n  \n  pipe = popen("gnuplot -persist","w");\n  //fprintf(pipe,"set term png enhanced font \\"v:/fireflysung.ttf\\" 18 \\n");\n  fprintf(pipe,"set term png enhanced font \\"y:/wqy-microhei.ttc\\" 18 \\n");\n  //fprintf(pipe,"set yrange [68:70]\\n");\n  fprintf(pipe,"set output \\"test.png\\"\\n");\n  fprintf(pipe, "plot \\"osc.dat\\" title \\"位移\\" with lines, \\"osc1.dat\\" title \\"速度\\" with lines\\n");\n  fprintf(pipe,"quit\\n");\n \n  fprintf(pipe,"quit\\n");\n  pclose(pipe);\n}\n  \nvoid runge4(double x, double y[], double step){\n  \n  double h=step/2.0, /* the midpoint */\n  t1[N], t2[N], t3[N], /* temporary storage arrays */\n  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */\n  int i;\n  \n  for (i=0;i<N;i++){\n  \n    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    k4[i]= step*f(x+step, t3, i);\n  }\n  \n  for (i=0;i<N;i++){\n  \n    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;\n  }\n}\n  \ndouble f(double x, double y[], int i){\n  \n  if (i==0)\n    x=y[1]; /* derivative of first equation */\n  if (i==1)\n    x=-y[0]-0.5*y[1];\n  return x;\n} \n 上述所解的狀態方程式: \n 質量為 1kg 物理, 以 k=1 彈簧與 b=0.5 阻尼器連接在固定牆壁, 起始拉開 1m, 速度為０ 時放開, 求放開質量後的運動模擬. \n x ( t ) \xa0 表示質量拉開水平方向設為正向 x, 且為時間 t 的函式. \n x ¨ + x + 0.5 ∗ x ˙ = 0 \n x ( 0 ) = 1.0 \n x ˙ ( 0 ) = 0 \n 以下利用程式定義解題: \n x = y [ 0 ] \n x ˙ = y [ 1 ] \n x ¨ = − y [ 0 ] − 0.5 ∗ y [ 1 ] \n 起始條件: \n x ( 0 ) = 1 \n x ˙ = 0 \n \n 並產生數值運算結果: \n \n \n', 'tags': '', 'url': '利用 SciTE 編輯器類解譯 ANSI C 程式.html'}, {'title': '小組討論', 'text': '\n \n', 'tags': '', 'url': '小組討論.html'}, {'title': 'week 11', 'text': '\n', 'tags': '', 'url': 'week 11.html'}, {'title': 'week 12', 'text': '\n', 'tags': '', 'url': 'week 12.html'}, {'title': 'week 13', 'text': '\n \n', 'tags': '', 'url': 'week 13.html'}, {'title': 'week 14', 'text': '\n \n', 'tags': '', 'url': 'week 14.html'}, {'title': 'week 15', 'text': '\n \n', 'tags': '', 'url': 'week 15.html'}, {'title': 'week 16', 'text': '', 'tags': '', 'url': 'week 16.html'}, {'title': 'week 17', 'text': '\n \n \n \n \n \n', 'tags': '', 'url': 'week 17.html'}]};