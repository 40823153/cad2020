<h1>簡介</h1>
<p><span>四設計二甲 40823153 蕭日傑</span></p>
<p><span>個人倉儲 <a href="https://github.com/40823153/cad2020">cad2020</a></span></p>
<p><span>個人<a href="https://www.youtube.com/channel/UCmu7LL2J3PSsmYqDy1RUNEg?guided_help_flow=5">youtube</a></span></p>
<p><span>個人<a href="https://gitter.im/home">Gittet</a></span></p>
<p><span></span></p>
<p><span><img alt="" height="206" src="/images/Coding_Programming_code_tech_computer_letters_words_symbols_numbers_screen_monitor_1600x900-816x459.jpg" width="366"/></span></p>
<p><span></span></p><h1>about</h1>
<div id="tipue_search_content">
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules<span> </span><a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
</div>
<div class="container">
<div class="row pt-3 mx-auto"></div>
</div><h1>develop</h1>
<div id="tipue_search_content">
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<p>40823153</p>
</div>
<div class="container">
<div class="row pt-3 mx-auto"></div>
</div><h1>課程內容</h1>
<h2>Week 1</h2>
<p>inventer 體積</p>
<p><a href="/downloads/CAD2020電腦輔助設計實習       Inventer.pdf">/downloads/CAD2020電腦輔助設計實習 Inventer.pdf</a></p>
<p></p>
<p>inventer 圖檔 13~24</p>
<p><a href="https://drive.google.com/drive/folders/1TMCbbSPXVsoxL-f41DMeQXRwMcq0uxPN?usp=sharing">https://drive.google.com/drive/folders/1TMCbbSPXVsoxL-f41DMeQXRwMcq0uxPN?usp=sharing</a></p>
<h2>week 4</h2>
<p>nx12 功能介紹</p>
<h2>week 5</h2>
<p>ssh的增設</p><h2>week 6</h2>
<h2>week 7</h2>
<p>工程師的特質</p>
<p>利用 SciTE 編輯器類解譯 ANSI C 程式</p>
<h4></h4><h3>工程師的特質</h3>
<p>1.需要具有創造性</p>
<p>2.<span>精確精巧很聰明的創造</span></p>
<h3>利用 SciTE 編輯器類解譯 ANSI C 程式</h3>
<p>1. 從 Tiny C 官方網站中的<span> </span><a href="http://download.savannah.gnu.org/releases/tinycc/">Download</a><span> </span>連結, 可以下載 <a href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.27-win64-bin.zip">tcc-0.9.27-win64-bin.zip</a>, 解開壓縮檔案後的目錄為 tcc, 其中包含 tcc.exe, 可以用來編譯 ANSI C 程式, 這個目錄必須放在 y:\ 根目錄中.</p>
<p>2. 接著必須將 y:\tcc\ 放入隨身系統中的 path 命令搜尋路徑中, 一旦啟動後就可以直接執行 tcc.exe, 也就是 start.bat 必須修改如下:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">set path_portablegit=%Disk%:\Portablegit\bin;
set path_julia=%Disk%:\julia-1.5.2\bin;
set path_tcc=%Disk%:\tcc\;
 
path=%Disk%:;%path_python%;%path_portablegit%;%path_julia%;%path_tcc%;%path%;</pre>
<p>在上面 start.bat 的設定中, 可以發現除了 portablegit 之外, 同時增加 path_julia 與 path_tcc 兩個批次檔變數的設定, 並且分別加到 path= 的設定中.</p>
<p>完成後, 可以利用 stop.bat 關閉隨身系統後, 再使用 start.bat 重新啟動, 並在命令列中輸入 tcc, 若出現</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Tiny C Compiler 0.9.27 - Copyright (C) 2001-2006 Fabrice Bellard
Usage: tcc [options...] [-o outfile] [-c] infile(s)...
       tcc [options...] -run infile [arguments...]
General options:
  -c          compile only - generate an object file
  -o outfile  set output filename
  -run        run compiled source
  -fflag      set or reset (with 'no-' prefix) 'flag' (see tcc -hh)
  -Wwarning   set or reset (with 'no-' prefix) 'warning' (see tcc -hh)
  -w          disable all warnings
  -v -vv      show version, show search paths or loaded files
  -h -hh      show this, show more help
  -bench      show compilation statistics
  -           use stdin pipe as infile
  @listfile   read arguments from listfile
Preprocessor options:
  -Idir       add include path 'dir'
  -Dsym[=val] define 'sym' with value 'val'
  -Usym       undefine 'sym'
  -E          preprocess only
Linker options:
  -Ldir       add library path 'dir'
  -llib       link with dynamic or static library 'lib'
  -r          generate (relocatable) object file
  -shared     generate a shared library/dll
  -rdynamic   export all global symbols to dynamic linker
  -soname     set name for shared library to be used at runtime
  -Wl,-opt[=val]  set linker option (see tcc -hh)
Debugger options:
  -g          generate runtime debug info
  -b          compile with built-in memory and bounds checker (implies -g)
  -bt N       show N callers in stack traces
Misc. options:
  -x[c|a|n]   specify type of the next infile
  -nostdinc   do not use standard system include paths
  -nostdlib   do not link with standard crt and libraries
  -Bdir       set tcc's private include/library dir
  -MD         generate dependency file for make
  -MF file    specify dependency file name
  -m32/64     defer to i386/x86_64 cross compiler
Tools:
  create library  : tcc -ar [rcsv] lib.a files
  create def file : tcc -impdef lib.dll [-v] [-o lib.def]</pre>
<p>表示啟動命令搜尋路徑已經包含 y:\tcc 目錄.</p>
<p>3. 接下來必須修改 SciTE 編輯器中的 cpp.properties, 讓 Tools -&gt; Go 可以呼叫 tcc.exe 類解譯編輯器中副檔名為 .c 的 ANSI C 程式.</p>
<p>作法為將滑鼠指向 SciTE 下拉式功能表 Options 往下點擊 Open cpp.properties 編輯設定檔案, 並且勾選 View -&gt; Line Number 在編輯器中顯示行號, 針對  476 行之後的設定修改如下:</p><h2>week 10</h2>
<h2>week 11</h2>
<h2>week 12</h2>
<h2>week 13</h2>
<h2>week 14</h2>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>